# Midnight Commander 3.0 extension file
# Warning: Structure of this file has changed completely with version 3.0
#
# All lines starting with # or empty lines are thrown away.
# Lines starting in the first column should have following format:
#
# keyword/descNL, i.e. everything after keyword/ until new line is desc
#
# keyword can be: 
#
#    shell (desc is, when starting with a dot, any extension (no wildcards), 
#          i.e. matches all the files *desc . Example: .tar matches *.tar;
#          if it doesn't start with a dot, it matches only a file of that name)
#
#    regex (desc is an extended regular expression)
#          Please note that we are using the GNU regex library and thus
#          \| matches the literal | and | has special meaning (or) and
#          () have special meaning and \( \) stand for literal ( ).
#
#    type  (file matches this if `file %f` matches regular expression desc
#          (the filename: part from `file %f` is removed))
#
#    directory (matches any directory matching regular expression desc)
#
#    include (matches an include directive)
#
#    default (matches any file no matter what desc is)
#
# Other lines should start with a space or tab and should be in the format:
#
# keyword=commandNL (with no spaces around =), where keyword should be: 
#
#    Open (if the user presses Enter or doubleclicks it), 
#
#    View (F3), Edit (F4)
#
#    Include is the keyword used to add any further entries from an include/
#    section
#
# command is any one-line shell command, with the following substitutions:
#
# %% -> % character
# %p -> name of the current file (without path, but pwd is its path)
# %f -> name of the current file. Unlike %p, if file is located on a 
#	non-local virtual filesystem, i.e. either tarfs, mcfs or ftpfs,
#	then the file will be temporarily copied into a local directory
#	and %f will be the full path to this local temporal file.
#	If you don't want to get a local copy and want to get the
#	virtual fs path (like /#ftp:ftp.cvut.cz/pub/hungry/xword), then
#	use %d/%p instead of %f.
# %d -> name of the current directory (pwd, without trailing slash)
# %s -> "selected files", i.e. space separated list of tagged files if any
#       or name of the current file
# %t -> list of tagged files
# %u -> list of tagged files (they'll be untagged after the command)
#
# (If these 6 letters are in uppercase, they refer to the other panel.
# But you shouldn't have to use it in this file.)
#
#
# %cd -> the rest is a path mc should change into (cd won't work, since it's
#	a child process).  %cd handles even vfs names.
#
# %view -> the command you type will be piped into mc's internal file viewer
#	if you type only the %view and no command, viewer will load %f file
#	instead (i.e. no piping, so it is different to %view cat %f)
#	%view may be directly followed by {} with a list of any of
#	ascii (Ascii mode), hex (Hex mode), nroff (color highlighting for
#	text using backspace for bold and underscore) and unform
#	(no highlighting for nroff sequences) separated by commas.
#
# %var -> You use it like this: %var{VAR:default}.  This macro will expand
#       to the value of the VAR variable in the environment if it's set
#       otherwise the value in default will be used.  This is similar to
#       the Bourne shell ${VAR-default} construct.
#
# Rules are applied from top to bottom, thus the order is important.
# If some actions are missing, search continues as if this target didn't
# match (i.e. if a file matches the first and second entry and View action
# is missing in the first one, then on pressing F3 the View action from
# the second entry will be used. default should catch all the actions.
#
# Any new entries you develop for you are always welcome if they are
# useful on more than one system.  You can post your modifications
# as tickets at www.midnight-commander.org


### Changes ###
#
# Reorganization: 2000-05-01 Michal Svec <rebel@penguin.cz>


### TODO ###
#
# Postscript	Open: ps2svga [gs -DEVICE=jpeg|zgv or something]
# Images		asciiview
# 
# All X Apps	[Nothing/Warning] if no DISPLAY
# Not found	[Default/Warning]
# Empty Output	[Default/Warning]
# Edit:		CopyOut+EDIT+CopyIn
# Security	Check gzip/bzip EDIT (mktemp)
# 
# Maybe:	Open/XOpen/GOpen/KOpen/... for Console/X/GNOME/KDE/etc.


### Archives ###

# [*.tgz, *.tpz, *.tar.gz, *.tar.z, *.tar.Z, *.ipk]
regex/\.t([gp]?z|ar\.g?[zZ])$|\.ipk|\.gem$
	Open=%cd %p#utar
	View=%view{ascii} gzip -dc %f 2>/dev/null | tar tvvf -

# [*.tar bz]
regex/\.tar\.bz$
	# Open=%cd %p#utar
	View=%view{ascii} bzip -dc %f 2>/dev/null | tar tvvf -

# [*.tar.bz, *.tbz2, *.tb2]
regex/\.t(ar\.bz2|bz2?|b2)$
	Open=%cd %p#utar
	View=%view{ascii} bzip2 -dc %f 2>/dev/null | tar tvvf -

# [*..tar.lzma, *..tlz]
regex/\.t(ar\.lzma|lz)$
	Open=%cd %p#utar
	View=%view{ascii} lzma -dc %f 2>/dev/null | tar tvvf -

# [*.tar.xz, *.txz]
regex/\.t(ar\.xz|xz)$
	Open=%cd %p#utar
	View=%view{ascii} xz -dc %f 2>/dev/null | tar tvvf -

# [*.tar.F] - used in QNX
regex/\.tar\.F$
	# Open=%cd %p#utar
	View=%view{ascii} freeze -dc %f 2>/dev/null | tar tvvf -

# [*.qpr, *.qpk] - QNX Neutrino package installer files 
regex/\.(qp[rk])$
	Open=%cd %p#utar
	View=%view{ascii} gzip -dc %f 2>/dev/null | tar tvvf -

# [*.tar]
regex/\.(tar|TAR)$
	Open=%cd %p#utar
	View=%view{ascii} tar tvvf %f

# lha
type/^LHa\ .*archive
	Open=%cd %p#ulha
	View=%view{ascii} lha l %f
]
# arj
# [*.arj, *.a11]
regex/\.a(rj|[0-9][0-9])$
	Open=%cd %p#uarj
	View=%view{ascii} arj l %f

# [*.cab]
regex/\.([cC][aA][bB])$
	Open=%cd %p#ucab
	View=%view{ascii} cabextract -l %f

# [*.ha]
regex/\.([Hh][Aa])$
	Open=%cd %p#uha
	View=%view{ascii} ha lf %f

# [*.rar, *.11]
regex/\.[rR]([aA][rR]|[0-9][0-9])$
	Open=%cd %p#urar
	View=%view{ascii} rar v -c- %f

# ALZip
# [*.alz]
regex/\.(alz|ALZ)$
	Open=%cd %p#ualz
	View=%view{ascii} unalz -l %f

# cpio
# [*.cpio.Z]
shell/.cpio.Z
	Open=%cd %p#ucpio
	View=%view{ascii} gzip -dc %f | cpio -itv 2>/dev/null
# [*.cpio.gz]
shell/.cpio.gz
	Open=%cd %p#ucpio
	View=%view{ascii} gzip -dc %f | cpio -itv 2>/dev/null
# [*.cpio]
shell/.cpio
	Open=%cd %p#ucpio
	View=%view{ascii} cpio -itv < %f 2>/dev/null

# ls-lR
# [*.ls-lR, *.lslR, *.ls-lR.gz, *.lslR.gz, *.ls-lR.Z, *.lslR.Z,
#  *.ls-lR.bz2, *.lslR.bz2]
regex/(^|\.)ls-?lR(\.gz|Z|bz2)$
	Open=%cd %p#lslR

# patch
# [*.diff.bz2, *.patch.bz2]
regex/\.(diff|patch)(\.bz2)$
	Open=%cd %p#patchfs
	View=%view{ascii} bzip2 -dc %f 2>/dev/null
# [*.diff.gz, *.patch.gz, *.diff.Z, *.patch.Z]
regex/\.(diff|patch)(\.(gz|Z))$
	Open=%cd %p#patchfs
	View=%view{ascii} gzip -dc %f 2>/dev/null
# [*.diff.bz2, *.patch.bz2]
regex/\.(diff|patch)$
	Open=%cd %p#patchfs
	View=%view{ascii} /bin/cat %f 2>/dev/null

# ar library
# [*.sa, *.a]
regex/\.s?a$
	Open=%cd %p#uar
	#Open=%view{ascii} ar tv %f
	View=%view{ascii} file %f && nm %f

# trpm
# [*.trpm]
regex/\.trpm$
	Open=%cd %p#trpm
	View=%view{ascii} rpm -qivl --scripts `basename %p .trpm`

# rpm packages (SuSE uses *.spm for source packages)
# [*.src.rpm, *.spm]
regex/\.(src\.rpm|spm)$
	Open=%cd %p#rpm
	View=%view{ascii} if rpm --nosignature --version >/dev/null 2>&1; then RPM="rpm --nosignature" ; else RPM="rpm" ; fi ; $RPM -qivlp --scripts %f

# [*.rpm]
regex/\.rpm$
	Open=%cd %p#rpm
	View=%view{ascii} if rpm --nosignature --version >/dev/null 2>&1; then RPM="rpm --nosignature" ; else RPM="rpm" ; fi ; $RPM -qivlp --scripts %f

# deb
# [*.udeb, *.deb]
regex/\.u?deb$
	Open=%cd %p#deb
	View=%view{ascii} dpkg-deb -I %f && echo && dpkg-deb -c %f

# dpkg
# [*.debd]
shell/.debd
        Open=%cd %p#debd
        View=%view{ascii} dpkg -s `echo %p | sed 's/\([0-9a-z.-]*\).*/\1/'`
# apt
# [*.deba]
shell/.deba
        Open=%cd %p#deba
        View=%view{ascii} apt-cache show `echo %p | sed 's/\([0-9a-z.-]*\).*/\1/'`

# iso9660
## edited by dn, date unknown
# [*.iso]
regex/\.iso$
	#Open=%cd %p#iso9660
	Edit=%cd %p#iso9660
	Open=(ogle -u cli %f >/dev/null 2>&1 &)
	View=(ogle -u cli %f >/dev/null 2>&1 &)
	#View=%view{ascii} isoinfo -l -i %f

# 7zip archives (they are not man pages)
# [*.7z]
shell/.7z
	Open=%cd %p#u7z
	View=%view{ascii} 7za l %f 2>/dev/null

# Mailboxes
type/^ASCII\ mail\ text
	Open=%cd %p#mailfs


### Sources ###

# c
# [*.c]
shell/.c
	Open=sensible-editor %f

# fortran
# [*.f]
shell/.f
	Open=sensible-editor %f
	
# header
# [*.h, *.hpp]
regex/\.(h|hpp)$
	Open=sensible-editor %f

# object
type/^ELF
	#Open=%var{PAGER:more} %f
	View=%view{ascii} file %f && nm %f

# asm
# [*.s]
shell/.s
	Open=sensible-editor %f

# c++
# [*.C, *.cc, *.cpp]
regex/\.(C|cc|cpp)$
	Open=sensible-editor %f

# planner
# [*.planner]
regex/\.planner$
	Open=( planner %f > /dev/null 2>&1 & )
	View=( planner %f > /dev/null 2>&1 & )

### Documentation ###

# texinfo
# [*.texi, *.txi, *.texinfo]
regex/\.(te?xi|texinfo)$

# gnu info page
type/^Info\ text
	Open=info -f %f

shell/.info
	Open=info -f %f

# manual page
# exception - .so libraries are not manual pages
# [*.so, *.so.1.]
regex/\.(so|so\.[0-9\.]*)$
	View=%view{ascii} file %f && nm %f
# [abc.1, abc.1p, abc.ln, abc.man]
regex/(([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])|\.man)$
	Open=case %d/%f in */log/*|*/logs/*) cat %f ;; *) { zsoelim %f 2>/dev/null || cat %f; } | nroff -c -Tlatin1 -mandoc ;; esac | %var{PAGER:more}
	View=%view{ascii,nroff} case %d/%f in */log/*|*/logs/*) cat %f ;; *) { zsoelim %f 2>/dev/null || cat %f; } | nroff -c -Tlatin1 -mandoc ;; esac

# perl pod page
# [*.pod]
shell/.pod
	Open=pod2man %f | nroff -c -Tlatin1 -mandoc | %var{PAGER:more}
	View=%view{ascii,nroff} pod2man %f | nroff -c -Tlatin1 -mandoc

# troff with me macros.
# exception - "read.me" is not a nroff file.
# [read.me]
shell/read.me
	Open=
	View=
# [*.me]
shell/.me
	Open=nroff -c -Tlatin1 -me %f | sensible-pager
	View=%view{ascii,nroff} nroff -c -Tlatin1 -me %f

# troff with ms macros.
# [*.ms]
shell/.ms
	Open=nroff -c -Tlatin1 -ms %f | sensible-pager
	View=%view{ascii,nroff} nroff -c -Tlatin1 -ms %f

# manual page - compressed
# [abc.1.gz, abc.1.z, abc.1p.gz, abc.1p.z, abc.ln.gz, abc.ln.z]
regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.g?[Zz]$
	Open=case %d/%f in */log/*|*/logs/*) gzip -dc %f ;; *) gzip -dc %f | nroff -c -Tlatin1 -mandoc ;; esac | sensible-pager
	View=%view{ascii,nroff} case %d/%f in */log/*|*/logs/*) gzip -dc %f ;; *) gzip -dc %f | nroff -c -Tlatin1 -mandoc ;; esac
# [abc.1.bz, abc.1p.bz, abc.ln.bz]
regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.bz$
	Open=case %d/%f in */log/*|*/logs/*) bzip -dc %f ;; *) bzip -dc %f | nroff -c -Tlatin1 -mandoc ;; esac | sensible-pager
	View=%view{ascii,nroff} case %d/%f in */log/*|*/logs/*) bzip -dc %f ;; *) bzip -dc %f | nroff -c -Tlatin1 -mandoc ;; esac
# [abc.1.bz2, abc.1p.bz2, abc.ln.bz2]
regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.bz2$
	Open=case %d/%f in */log/*|*/logs/*) bzip2 -dc %f ;; *) bzip2 -dc %f | nroff -c -Tlatin1 -mandoc ;; esac | sensible-pager
	View=%view{ascii,nroff} case %d/%f in */log/*|*/logs/*) bzip2 -dc %f ;; *) bzip2 -dc %f | nroff -c -Tlatin1 -mandoc ;; esac
# [abc.1.lzma, abc.1p.lzma, abc.ln.lzma]
regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.lzma$
	Open=case %d/%f in */log/*|*/logs/*) lzma -dc %f ;; *) lzma -dc %f | nroff -c -Tlatin1 -mandoc ;; esac | %var{PAGER:more}
	View=%view{ascii,nroff} case %d/%f in */log/*|*/logs/*) lzma -dc %f ;; *) lzma -dc %f | nroff -c -Tlatin1 -mandoc ;; esac
# [abc.1.xz, abc.1p.xz, abc.ln.xz]
regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.xz$
	Open=case %d/%f in */log/*|*/logs/*) xz -dc %f ;; *) xz -dc %f | nroff -c -Tlatin1 -mandoc ;; esac | %var{PAGER:more}
	View=%view{ascii,nroff} case %d/%f in */log/*|*/logs/*) xz -dc %f ;; *) xz -dc %f | nroff -c -Tlatin1 -mandoc ;; esac

# chm
# [*.chm]
regex/\.(chm|CHM)$
	Open=which kchmviewer > /dev/null 2>&1 && (kchmviewer %f &) || (xchm %f &)


### Images ###

# gif
type/^GIF
	Include=image

# jpg, jpeg
type/^JPEG
	Include=image
	View=%view{ascii} identify %f; test -x /usr/bin/exif && echo && exif %f 2>/dev/null

# bitmap
type/^PC\ bitmap
	Include=image

# png
type/^PNG
	Include=image

# tiff
type/^TIFF
	Include=image

# pbm
type/^PBM
	Include=image

# pgm
type/^PGM
	Include=image

# ppm
type/^PPM
	Include=image

# netpbm
type/^Netpbm
	Include=image

# xcf
# [*.xcf]
shell/.xcf
	Open=( gimp %f > /dev/null 2>&1 & )

# xbm
# [*.xbm]
shell/.xbm
	Open=bitmap %f
	#Include=image 

# xpm
# [*.xpm]
shell/.xpm
	Include=image
	View=sxpm %f

include/image
	Open=( see %f > /dev/null 2>&1 & )
	View=%view{ascii} identify %f
	Edit=( gimp %f > /dev/null 2>&1 & )
	#View=%view{ascii} asciiview %f


### Sound files ###

# [*.wav, *.snd, *.voc, *.au, *.smp, *.aiff]
regex/\.([wW][aA][vV]|[sS][nN][dD]|[vV][oO][cC]|[aA][uU]|[sS][mM][pP]|[aA][iI][fF][fF])$
	Open=(run-mailcap audio/x-wav:%f >/dev/null 2>&1 &)
	#Open=if [ "$DISPLAY" = "" ]; then play %f; else (xmms %f >/dev/null 2>&1 &); fi
# [*.mod, *.s3m, *.xm, *.it, *.mtm, *.669, *.stm, *.ult, *.far]
regex/\.([mM][oO][dD]|[sS]3[mM]|[xX][mM]|[iI][tT]|[mM][tT][mM]|669|[sS][tT][mM]|[uU][lL][tT]|[fF][aA][rR])$
	Open=(run-mailcap application/x-mod:%f >/dev/null 2>&1 &)
	#Open=mikmod %f
	#Open=tracker %f

# [*.wav22]
regex/\.([wW][aA][wW]22)$
	Open=(vplay -s 22 %f &)

# [*.mp3]
regex/\.([mM][pP]3)$
	#Open=(run-mailcap audio/mpeg:%f >/dev/null 2>&1 &)
	Open=(mplayer %f 2>&1)
	#Open=if [ "$DISPLAY" = "" ]; then mpg123 %f; else (xmms %f >/dev/null 2>&1 &); fi
	View=%view{ascii} mpg123 -vtn1 %f 2>&1 | sed -n '/^Title/,/^Comment/p;/^MPEG/,/^Audio/p'

# mpc (Musepack Compressed Audio)
# - omission of mime-type in run-mailcap command causes it
#   to try and match the extension in the mime.types files
#   (see 'man mime.types' and 'man run-mailcap')
# - the mime.types file defines a mime-type
# - the mailcap file (see 'man mailcap') defines the
#   command to play the file with that extension
# [*.mpc]
regex/\.([mM][pP][cC])$
	Open=(run-mailcap %f >/dev/null 2>&1 &)

# [*.ac3]
regex/\.([aA][cC]3)$
	Open=(gmplayer %f >/dev/null 2>&1 &)

# [*.ogg, *.avx]
regex/\.([oO][gG][gG|aA|vV|xX])$
	Open=(run-mailcap application/x-ogg:%f >/dev/null 2>&1 &)
	#Open=if [ "$DISPLAY" = "" ]; then ogg123 %f; else (xmms %f >/dev/null 2>&1 &); fi
	View=%view{ascii} ogginfo %s

# [*.spx, *.flac]
regex/\.([sS][pP][xX]|[fF][lL][aA][cC])$
	Open=if [ "$DISPLAY" = "" ]; then play %f; else (xmms %f >/dev/null 2>&1 &); fi

# [*.mid, *.midi, *.rmi, *.rmid]
regex/\.([mM][iI][dD][iI]?|[rR][mM][iI][dD]?)$
	Open=(run-mailcap audio/midi:%f >/dev/null 2>&1 &)
	#Open=timidity %f

# [*.wma]
regex/\.([wW][mM][aA])$
	Open=(gmplayer -vo null %f >/dev/null 2>&1 &)
	View=%view{ascii} gmplayer -quiet -slave -frames 0 -vo null -ao null -identify %f 2>/dev/null | tail +13 || file %f


### Play lists ###

# [*.m3u, *.pls]
regex/\.([mM]3[uU]|[pP][lL][sS])$
	Open=if [ -z "$DISPLAY" ]; then (gmplayer -vo null -playlist %f >/dev/null 2>&1 &); else (xmms -p %f >/dev/null 2>&1 &); fi


### Video ###

# [*.avi]
regex/\.([aA][vV][iI])$
	Include=video
	#Open=(gmplayer -fs %f >/dev/null 2>&1 &)

# [*.asf, *.asx]
regex/\.([aA][sS][fFxX])$
	Include=video

# [*.divx]
regex/\.([dD][iI][vV][xX])$
	Include=video

# [*.mkv]
regex/\.([mM][kK][vV])$
	Open=(gmplayer -fs %f >/dev/null 2>&1 &)

# [*.mov, *.qt]
regex/\.([mM][oO][vV]|[qQ][tT])$
	Include=video

# [*.mp4, *.mpg, *.mpeg]
regex/\.([mM][pP]4|[mM][pP][eE]?[gG])$
	Include=video

# [*.m2v]
regex/\.([mM]2[vV])$
	Include=video

# [*.vob]
regex/\.([vV][oO][bB])$
	Include=video

# [*.wmv]
regex/\.([wW][mM][vV])$
	Include=video

# [*.fli, *.flc, *.flv]
regex/\.([fF][lL][iIcCvV])$
	Include=video

# [*.ogm]
regex/\.([oO][gG][mM])$
	Include=video

# [*.ogv]
regex/\.([oO][gG][vV])$
	Include=video  # mplayer plays OGV with reflective band across top
	#Open=(miro %f >/dev/null 2>&1 &)

# [*.rm, *.ram]
regex/\.([rR][aA]?[mM])$
	Include=video
	#Open=(run-mailcap audio/x-pn-realaudio:%f >/dev/null 2>&1 &)
	#Open=(realplay %f >/dev/null 2>&1 &)

include/video
	Open=(mplayer %f >/dev/null 2>&1 &)
	#Open=(see %f &>/dev/null &)
	#Open=(gtv %f >/dev/null 2>&1 &)
	#Open=(xanim %f >/dev/null 2>&1 &)


### File Transfer ###

# torrent
# added by dn, 2010-09-25
type/^BitTorrent\ file
	Open=(run-mailcap application/x-bittorrent:%f >/dev/null 2>&1 &)


### Documents ###

# postscript
#regex/\.([eE]?[pP][sS])(\.[gG][zZ])?$
type/^PostScript
	Open=(run-mailcap application/postscript:%f >/dev/null 2>&1 &)
	#Open=(gv %f &)
	View=%view{ascii} ps2ascii %f

# pdf
#type/^PDF
regex/\.([pP][dD][fF])(\.[gG][zZ])?$
	Open=(run-mailcap application/pdf:%f >/dev/null 2>&1 &)
	#Open=(see %f &)
	#Open=(xpdf %f &)
	#Open=(acroread %f &)
	#Open=(ghostview %f &)
	View=%view{ascii} pdftotext %f -

# epub
#regex/\.([eE][pP][uU][bB])(\.[gG][zZ])?$
type/^EPUB\ ebook\ data
	Open=(fbreader %f >/dev/null 2>&1 &)
	View=(sensible-editor %f >/dev/null 2>&1 &)

# mobi
regex/\.([mM][oO][bB][iI])$
	Open=(fbreader %f >/dev/null 2>&1 &)
	View=(sensible-editor %f >/dev/null 2>&1 &)

# the following code very ugly and should not be taken as example --
# it should be cleaned up when the new format of mc.ext is developed

# [*.htm, *.html]
regex/\.([hH][tT][mM][lL]?)$
	Open=(run-mailcap text/html:%f >/dev/null 2>&1 &)
	#Open=(if test -n "" && test -n "$DISPLAY"; then ( file://%d/%p &) 1>&2; else links %f || lynx -force_html %f || ${PAGER:-more} %f; fi) 2>/dev/null
	View=%view{ascii} links -dump %f 2>/dev/null || w3m -dump %f 2>/dev/null || lynx -dump -force_html %f

# staroffice 5.2
# [*.sdw]
shell/.sdw
	Open=(libreoffice %f >/dev/null 2>&1 &)

# staroffice 6 and openoffice.org formats
# note: compressed files with mime type 'application/zip'
# [*.odt, *.ott, *.sxw, *.stw, *.ods, *.ots, *.sxc, *.stc, *.odp, *.otp,
#  *.sxi, *.sti, *.odg, *.otg, *.sxd, *.std, *.odb, *.odf, *.sxm, *.odm,
#  *.sxg, *.ppt, *.pps]
regex/\.(odt|ott|sxw|stw|ods|ots|sxc|stc|odp|otp|sxi|sti|odg|otg|sxd|std|odb|odf|sxm|odm|sxg|ppt|pps)$
	Open=(libreoffice %f >/dev/null 2>&1 &)
	View=%view{ascii} odt2txt %f
	#View=%view{ascii} unzip -p %f content.xml | o3totxt

# abiword
# [*.abw]
shell/.abw
	Open=(abiword %f &)

# microsoft word document
# [*.doc, *.dot, *.wri]
regex/\.([Dd][oO][cCtT]|[Ww][rR][iI])$
	Open=(run-mailcap application/msword:%f >/dev/null 2>&1 &)
	#Open=(abiword %f >/dev/null 2>&1 &)
	View=%view{ascii} antiword -t %f || catdoc -w %f || word2x -f text %f - || strings %f
type/^Microsoft\ Word
	Open=(run-mailcap application/msword:%f >/dev/null 2>&1 &)
	#Open=(abiword %f >/dev/null 2>&1 &)
	View=%view{ascii} antiword -t %f || catdoc -w %f || word2x -f text %f - || strings %f

# microsoft rtf
# [*.rtf]
regex/\.([rR][tT][fF])$
	Open=(run-mailcap text/rtf:%f >/dev/null 2>&1 &)
	#Open=(abiword %f >/dev/null 2>&1 &)

# microsoft excel worksheet
# [*.xls, *.xlw]
regex/\.([xX][lL][sSwW])$
	Open=(run-mailcap application/vnd.ms-excel:%f >/dev/null 2>&1 &)
	#Open=(gnumeric %f >/dev/null 2>&1 &)
	View=%view{ascii} xls2csv %f || strings %f
type/^Microsoft\ Excel
	Open=(run-mailcap application/vnd.ms-excel:%f >/dev/null 2>&1 &)
	#Open=(gnumeric %f >/dev/null 2>&1 &)
	View=%view{ascii} xls2csv %f || strings %f

# use openoffice.org to open any ms office documents
type/^Microsoft\ Office\ Document
	Open=(libreoffice %f >/dev/null 2>&1 &)

# framemaker
type/^FrameMaker
	Open=(fmclient -f %f &)

# dvi
# [*.dvi]
regex/\.([dD][vV][iI])$
	Open=(run-mailcap application/x-dvi:%f >/dev/null 2>&1 &)
	#Open=run-mailcap %f >/dev/null 2>&1 &
	View=%view{ascii} catdvi %f
	#View=%view{ascii} dvi2tty %f

# tex
# [*.tex]
regex/\.([Tt][Ee][Xx])$
	Open=sensible-editor %f
	#Open=%var{EDITOR:vi} %f

# DjVu
# [*.djvu]
regex/\.(djvu|DJVU)$
	Open=djview %f &

# lyx
## may have been added by DN, date unknown
# lyx
# [*.lyx]
regex/\.([Ll][Yy][Xx])$
	Open=( xterm -T "LyX Launcher" -geometry 80x40 -e "/usr/bin/lyx %f" & )
	#Open=lyx %f
	View=%view{ascii} lyxcat %f

# kdissert
# [*.kdi]
regex/\.([Kk][Dd][Ii])$
	Open=( kdissert %f &>/dev/null & )

# freemind
# [*.mm]
regex/\.([Mm][Mm])$
	Open=( freemind %f &>/dev/null & )

# tellico
# note: compressed file with mime type 'application/zip'
#       so this entry must occur before that for zip
# [*.tc]
regex/\.([Tt][Cc])$
	Open=(tellico %f >/dev/null 2>&1 &)

# text document
type/English\ text
	Include=plaintext
type/^ASCII\ news\ text
	Include=plaintext
type/^ASCII\ text
	Include=plaintext
type/^UTF-8\ Unicode\ \(with\ BOM\)\ Pascal\ program\ text
	# get when oowrite saves to text format
	Include=plaintext
type/^POSIX\ shell\ script\ text\ executable
	Include=plaintext
type/^Non-ISO\ extended-ASCII\ text,\ with\ CRLF\ line\ terminators
	# found in Met-Art downloads
	Include=plaintext
type/^Non-ISO\ extended-ASCII\ text,\ with\ very\ long\ lines,\ with\ CRLF\ line\ terminators
	# found in Met-Art downloads
	Include=plaintext
type/^ICE\ authority\ data
	# found in Met-Art downloads
	Include=plaintext
type/^SemOne\ archive\ data
	# found in Met-Art downloads
	Include=plaintext

include/plaintext
	Open=sensible-editor %f


### Databases ###

# gramps
## may have been added by dn, date unknown
# [*.grdb]
regex/\.([Gg][Rr][Dd][Bb])$
	Open=(gramps %f >/dev/null 2>&1 &)


### Miscellaneous ###

# makefile
# [*.makefile]
regex/[Mm]akefile$
	Open=make -f %f %{Enter parameters}

# imakefile
shell/Imakefile
	Open=xmkmf -a

# perl makefile (makemaker)
# [makefile.pl]
regex/^Makefile.(PL|pl)$
	Open=%var{PERL:perl} %f

# nsis
# [*.nsi]
regex/\.[nN][sS][iI]$
	Open=makensis %f;echo;echo "Press ENTER to exit...";read y

# dbf
# [*.dbf]
regex/\.([dD][bB][fF])$
       Open=%view{ascii} dbview %f
       View=%view{ascii} dbview -b %f

# rexx script
# [*.rex, *.rexx, *.cmd]
regex/\.(rexx?|cmd)$
       Open=rexx %f %{Enter parameters};echo "Press ENTER";read y

# dn-build-repository resources file
## added by dn, date unknown
# [*.dbnrep]
regex/\.([dD][bB][nN][rR][eE][pP])$
       Open=konsole --caption "Building Debian Repository" --icon /home/david/conf/system/icons/debian.xpm -e dn-build-repository -p %f &

# disk images for Commodore computers (VIC20, C64, C128)
# [*.d64]
regex/\.(d64|D64)$
	Open=%cd %p#uc1541
	View=%view{ascii} c1541 %f -list
	Extract=c1541 %f -extract

# glade, a user interface designer for GTK+ and GNOME
# [*.glade]
regex/\.([Gg][Ll][Aa][Dd][Ee])$
	Open=if glade-3 --version >/dev/null 2>&1; then (glade-3 %f >/dev/null 2>&1 &); else (glade-2 %f >/dev/null 2>&1 &); fi

# gettext Catalogs
# [*.mo]
shell/.mo
	View=%view{ascii} msgunfmt %f || cat %f


### Plain compressed files ###

# ace
regex/\.(ace|ACE)$
	Open=%cd %p#uace
	View=%view{ascii} unace l %f
	Extract=unace x %f

# arc
regex/\.(arc|ARC)$
	Open=%cd %p#uarc
	View=%view{ascii} arc l %f
	Extract=arc x %f '*'
	Extract (with flags)=I=%{Enter any Arc flags:}; if test -n "$I"; then arc x $I %f; fi

# zip
type/^([Zz][Ii][Pp])\ archive
	Open=%cd %p#uzip
	View=%view{ascii} unzip -v %f

# zoo
# [*.zoo]
regex/\.([Zz][Oo][Oo])$
	Open=%cd %p#uzoo
	View=%view{ascii} zoo l %f
	
# gzip
type/^gzip
	Open=gzip -dc %f | sensible-pager
	View=%view{ascii} gzip -dc %f 2>/dev/null

regex/\.(gz|Z)$
	View=%view{ascii} gzip -dc %f 2>/dev/null

# bzip2
type/^bzip2
	Open=bzip2 -dc %f | sensible-pager
	View=%view{ascii} bzip2 -dc %f 2>/dev/null

regex/\.bz2?$
	View=%view{ascii} bzip2 -dc %f 2>/dev/null

# bzip
type/^bzip
	Open=bzip -dc %f | sensible-pager
	View=%view{ascii} bzip -dc %f 2>/dev/null

# compress
type/^compress
	Open=gzip -dc %f | sensible-pager
	View=%view{ascii} gzip -dc %f 2>/dev/null

# lzma
regex/\.lzma$
	Open=lzma -dc %f | %var{PAGER:more}
	View=%view{ascii} lzma -dc %f 2>/dev/null

# xz
regex/\.xz$
	Open=xz -dc %f | %var{PAGER:more}
	View=%view{ascii} xz -dc %f 2>/dev/null

### Application-specific ###

# k3b
# [*.k3b]
regex/\.([Kk]3[Bb])$
	Open=(k3b %f >/dev/null 2>&1 &)


### Default ###

# default target for anything not described above
default/*
	Open=
	View=


### EOF ###
